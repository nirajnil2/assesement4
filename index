import { useState, useEffect } from "react";
import { ethers } from "ethers";
import atm_abi from "../artifacts/contracts/Assessment.sol/Assessment.json";

export default function HomePage() {
  const [ethWallet, setEthWallet] = useState(undefined);
  const [account, setAccount] = useState(undefined);
  const [atm, setATM] = useState(undefined);
  const [balance, setBalance] = useState(undefined);

  const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
  const atmABI = atm_abi.abi;

  // Function to check for MetaMask and retrieve accounts (if available)
  const getWallet = async () => {
    if (window.ethereum) {
      setEthWallet(window.ethereum);
    }

    if (ethWallet) {
      const accounts = await ethWallet.request({ method: "eth_accounts" });
      handleAccount(accounts);
    }
  };

  // Handle retrieved accounts, update state accordingly
  const handleAccount = (account) => {
    if (account) {
      console.log("Account connected: ", account);
      setAccount(account);
    } else {
      console.log("No account found");
    }
  };

  // Connect MetaMask account and establish connection to the contract
  const connectAccount = async () => {
    if (!ethWallet) {
      alert('MetaMask wallet is required to connect');
      return;
    }

    const accounts = await ethWallet.request({ method: 'eth_requestAccounts' });
    handleAccount(accounts);

    // Once connected, get a reference to the deployed contract
    getATMContract();
  };

  // Create an instance of the contract using the provider and signer
  const getATMContract = () => {
    
    const provider = new ethers.providers.Web3Provider(ethWallet);
    //Signers can be used to send transactions, sign data,
    // and interact with smart contracts that require transaction signatures.
    const signer = provider.getSigner();
    const atmContract = new ethers.Contract(contractAddress, atmABI, signer);

    setATM(atmContract);
  };

  // Fetch and update the user's balance
  const getBalance = async () => {
    if (atm) {
      try {
        const newBalance = (await atm.getBalance()).toNumber();
        setBalance(newBalance);
      } catch (error) {
        console.error("Error fetching balance:", error);
      }
    }
  };

  // Deposit funds into the ATM
  const deposit = async () => {
    if (atm) {
      try {
        let tx = await atm.deposit(1);
        await tx.wait(); // Wait for transaction confirmation
        getBalance(); // Update balance after successful deposit
      } catch (error) {
        console.error("Error during deposit:", error);
        // Handle potential errors, e.g., insufficient funds
      }
    }
  };

  // Withdraw funds from the ATM
  const withdraw = async () => {
    if (atm) {
      try {
        let tx = await atm.withdraw(1);
        await tx.wait(); // Wait for transaction confirmation
        getBalance(); // Update balance after successful withdrawal
      } catch (error) {
        console.error("Error during withdrawal:", error);
        // Handle potential errors, e.g., insufficient funds
      }
    }
  };

  // Conditional rendering based on connection status and balance
  const initUser = () => {
    // Check for MetaMask
    if (!ethWallet) {
      return <p>Please install MetaMask in order to use this ATM.</p>;
    }

    // Check for connected account
    if (!account) {
      return <button className="connectButton" onClick={connectAccount}>Hi, Connect your Metamask wallet</button>;
    }

    // If balance is undefined, fetch it initially
    if (balance === undefined) {
      getBalance();
    }

    return (
      <div>
        <p>Your Account:- {account}</p>
        <p>Total Balance:- {balance}</p>
        <button className="actionButton" onClick={deposit}>Deposit  ETH</button>
        <button className="actionButton" onClick={withdraw}>Withdraw 1 ETH</button>
      </div>
    );
  };

  useEffect(() => {
    getWallet();
  }, []);

  return (
    <main className="container">
      <header>
        <h1><i>Welcome to our Metacrafters ATM! World</i>  <span> ðŸ˜€ </span> </h1>
      </header>
      {initUser()}
      <style jsx>{`
        .container {
          text-align: center;
          background: black;
          color: red;
          height: 500px;
          border-radius: 30px;
          padding: 20px;
        }
      `}</style>
    </main>
  );
}

